import numpy as np
import spacy
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Embedding, LSTM, SpatialDropout1D
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
import nltk

nltk.download('punkt')

import en_core_web_sm
nlp = en_core_web_sm.load()

text = """Hola mi llamo es ashok y soy de india, presente estudiado en universida de veltech en chennai.mi fovoriate cosas es a bailer y partido cricket. para todos dia, yo voy escuchar musica."""

tokens = nltk.word_tokenize(text.lower())
doc = nlp(' '.join(tokens))
lemmatized_tokens = [token.lemma_ for token in doc]
processed_text = ' '.join(lemmatized_tokens)

tokenizer = Tokenizer()
tokenizer.fit_on_texts([processed_text])
total_words = len(tokenizer.word_index) + 1

input_sequences = []
token_list = tokenizer.texts_to_sequences([processed_text])[0]

for i in range(1, len(token_list)):
    n_gram_sequence = token_list[:i + 1]
    input_sequences.append(n_gram_sequence)

max_sequence_len = max(len(seq) for seq in input_sequences)
input_sequences = pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre')

X = input_sequences[:, :-1]
y = input_sequences[:, -1]

model = Sequential()
model.add(Embedding(total_words, 150, input_length=max_sequence_len - 1))
model.add(SpatialDropout1D(0.3))
model.add(LSTM(150, return_sequences=True))
model.add(LSTM(100))
model.add(Dense(total_words, activation='softmax'))

optimizer = Adam(learning_rate=0.001)
model.compile(loss='sparse_categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])

early_stop = EarlyStopping(monitor='loss', patience=5, verbose=1)
reduce_lr = ReduceLROnPlateau(monitor='loss', factor=0.5, patience=3, verbose=1)

model.fit(X, y, epochs=50, batch_size=32, callbacks=[early_stop, reduce_lr], verbose=1)
